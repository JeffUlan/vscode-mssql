/* tslint:disable */
// THIS IS A COMPUTER GENERATED FILE. CHANGES IN THIS FILE WILL BE OVERWRITTEN.
// TO ADD LOCALIZED CONSTANTS, ADD YOUR CONSTANT TO THE ENU XLIFF FILE UNDER ~/localization/xliff/enu/constants/localizedConstants.enu.xlf AND REBUILD THE PROJECT
import * as nls from 'vscode-nls';
export let configMyConnectionsNoServerName = 'Missing server name in user preferences connection: ';
export let msgLocalWebserviceStaticContent = 'LocalWebService: added static html content path: ';
export let msgLocalWebserviceStarted = 'LocalWebService listening on port ';
export let msgRunQueryAllBatchesExecuted = 'runQuery: all batches executed';
export let msgStartedExecute = 'Started query execution for document "{0}"';
export let msgFinishedExecute = 'Finished query execution for document "{0}"';
export let msgRunQueryError = 'runQuery: error: ';
export let msgRunQueryExecutingBatch = 'runQuery: executeBatch called with SQL: ';
export let msgRunQueryAddBatchResultsets = 'runQuery: adding resultsets for batch: ';
export let msgRunQueryAddBatchError = 'runQuery: adding error message for batch: ';
export let msgRunQueryConnectionActive = 'runQuery: active connection is connected, using it to run query';
export let msgRunQueryConnectionDisconnected = 'runQuery: active connection is disconnected, reconnecting';
export let msgRunQueryNoConnection = 'runQuery: no active connection - prompting for user';
export let msgRunQueryInProgress = 'A query is already running for this editor session. Please cancel this query or wait for its completion.';
export let runQueryBatchStartMessage = 'Started executing query at ';
export let runQueryBatchStartLine = 'Line {0}';
export let msgCancelQueryFailed = 'Canceling the query failed: {0}';
export let msgCancelQueryNotRunning = 'Cannot cancel query as no query is running.';
export let msgCancelQuerySuccess = 'Successfully canceled the query.';
export let msgContentProviderOnContentUpdated = 'Content provider: onContentUpdated called';
export let msgContentProviderAssociationFailure = 'Content provider: Unable to associate status view for current file';
export let msgContentProviderOnRootEndpoint = 'LocalWebService: Root end-point called';
export let msgContentProviderOnResultsEndpoint = 'LocalWebService: ResultsetsMeta endpoint called';
export let msgContentProviderOnMessagesEndpoint = 'LocalWebService: Messages end-point called';
export let msgContentProviderOnColumnsEndpoint = 'LocalWebService:  Columns end-point called for index = ';
export let msgContentProviderOnRowsEndpoint = 'LocalWebService: Rows end-point called for index = ';
export let msgContentProviderOnClear = 'Content provider: clear called';
export let msgContentProviderOnUpdateContent = 'Content provider: updateContent called';
export let msgContentProviderProvideContent = 'Content provider: provideTextDocumentContent called: ';
export let msgChooseDatabaseNotConnected = 'No connection was found. Please connect to a server first.';
export let msgChooseDatabasePlaceholder = 'Choose a database from the list below';
export let msgConnectionError = 'Error {0}: {1}';
export let msgConnectionError2 = 'Failed to connect: {0}';
export let msgConnectionErrorPasswordExpired = 'Error {0}: {1} Please login as a different user and change the password using ALTER LOGIN.';
export let connectionErrorChannelName = 'Connection Errors';
export let msgPromptCancelConnect = 'Server connection in progress. Do you want to cancel?';
export let msgPromptClearRecentConnections = 'Confirm to clear recent connections list';
export let extensionActivated = 'activated.';
export let extensionDeactivated = 'de-activated.';
export let msgOpenSqlFile = 'To use this command, Open a .sql file -or- Change editor language to "SQL" -or- Select T-SQL text in the active SQL editor.';
export let recentConnectionsPlaceholder = 'Choose a connection profile from the list below';
export let msgNoConnectionsInSettings = 'To use this command, add connection profile to User Settings.';
export let labelOpenGlobalSettings = 'Open Global Settings';
export let labelOpenWorkspaceSettings = 'Open Workspace Settings';
export let CreateProfileFromConnectionsListLabel = 'Create Connection Profile';
export let CreateProfileLabel = 'Create';
export let ClearRecentlyUsedLabel = 'Clear Recent Connections List';
export let EditProfilesLabel = 'Edit';
export let RemoveProfileLabel = 'Remove';
export let ManageProfilesPrompt = 'Manage Connection Profiles';
export let SampleServerName = '{{put-server-name-here}}';
export let serverPrompt = 'Server name';
export let serverPlaceholder = 'hostname\\instance or <server>.database.windows.net';
export let databasePrompt = 'Database name';
export let databasePlaceholder = '[Optional] Database to connect (press Enter to connect to <default> database)';
export let databaseDefaultValue = 'master';
export let authTypePrompt = 'Authentication Type';
export let authTypeIntegrated = 'Integrated';
export let authTypeSql = 'SQL Login';
export let authTypeAdUniversal = 'Active Directory Universal';
export let usernamePrompt = 'User name';
export let usernamePlaceholder = 'User name (SQL Login)';
export let passwordPrompt = 'Password';
export let passwordPlaceholder = 'Password (SQL Login)';
export let msgSavePassword = 'Save Password? If \'No\', password will be required each time you connect';
export let profileNamePrompt = 'Profile Name';
export let profileNamePlaceholder = '[Optional] Enter a name for this profile';
export let filepathPrompt = 'File path';
export let filepathPlaceholder = 'File name';
export let filepathMessage = 'File name';
export let overwritePrompt = 'A file with this name already exists. Do you want to replace the existing file?';
export let overwritePlaceholder = 'A file with this name already exists';
export let msgSaveResultInProgress = 'A save request is already executing. Please wait for its completion.';
export let msgCannotOpenContent = 'Error occurred opening content in editor.';
export let msgSaveStarted = 'Started saving results to ';
export let msgSaveFailed = 'Failed to save results. ';
export let msgSaveSucceeded = 'Successfully saved results to ';
export let msgSelectProfile = 'Select connection profile';
export let msgSelectProfileToRemove = 'Select profile to remove';
export let confirmRemoveProfilePrompt = 'Confirm to remove this profile.';
export let msgNoProfilesSaved = 'No connection profile to remove.';
export let msgProfileRemoved = 'Profile removed successfully';
export let msgProfileCreated = 'Profile created successfully';
export let msgProfileCreatedAndConnected = 'Profile created and connected';
export let msgClearedRecentConnections = 'Recent connections list cleared';
export let msgSelectionIsRequired = 'Selection is required.';
export let msgIsRequired = ' is required.';
export let msgRetry = 'Retry';
export let msgError = 'Error: ';
export let msgYes = 'Yes';
export let msgNo = 'No';
export let defaultDatabaseLabel = '<default>';
export let notConnectedLabel = 'Disconnected';
export let notConnectedTooltip = 'Click to connect to a database';
export let connectingLabel = 'Connecting';
export let connectingTooltip = 'Connecting to: ';
export let connectedLabel = 'Connected.';
export let connectErrorLabel = 'Connection error';
export let connectErrorTooltip = 'Error connecting to: ';
export let connectErrorCode = 'Errorcode: ';
export let connectErrorMessage = 'ErrorMessage: ';
export let executeQueryLabel = 'Executing query ';
export let cancelingQueryLabel = 'Canceling query ';
export let updatingIntelliSenseLabel = 'Updating IntelliSense...';
export let unfoundResult = 'Data was disposed when text editor was closed; to view data please reexecute query.';
export let extensionNotInitializedError = 'Unable to execute the command while the extension is initializing. Please try again later.';
export let untitledScheme = 'untitled';
export let msgChangeLanguageMode = 'To use this command, you must set the language to "SQL". Confirm to change language mode.';
export let msgChangedDatabaseContext = 'Changed database context to "{0}" for document "{1}"';
export let msgPromptRetryCreateProfile = 'Error: Unable to connect using the connection information provided. Retry profile creation?';
export let retryLabel = 'Retry';
export let msgConnecting = 'Connecting to server "{0}" on document "{1}".';
export let msgConnectedServerInfo = 'Connected to server "{0}" on document "{1}". Server information: {2}';
export let msgConnectionFailed = 'Error connecting to server "{0}". Details: {1}';
export let msgChangingDatabase = 'Changing database context to "{0}" on server "{1}" on document "{2}".';
export let msgChangedDatabase = 'Changed database context to "{0}" on server "{1}" on document "{2}".';
export let msgDisconnected = 'Disconnected on document "{0}"';
export let msgErrorReadingConfigFile = 'Error: Unable to load connection profiles from [{0}]. Check if the file is formatted correctly.';
export let msgErrorOpeningConfigFile = 'Error: Unable to open connection profile settings file.';
export let titleResultsPane = 'Results: {0}';
export let macOpenSslErrorMessage = 'OpenSSL version >=1.0.1 is required to connect.';
export let macOpenSslHelpButton = 'Help';
export let gettingDefinitionMessage = 'Getting definition ...';
export let definitionRequestedStatus = 'DefinitionRequested';
export let definitionRequestCompletedStatus = 'DefinitionRequestCompleted';
export let updatingIntelliSenseStatus = 'updatingIntelliSense';
export let intelliSenseUpdatedStatus = 'intelliSenseUpdated';
export let testLocalizationConstant = 'test';
export let loadLocalizedConstants = (locale: string) => {
	let localize = nls.config({ locale: locale })();
	configMyConnectionsNoServerName = localize('configMyConnectionsNoServerName', 'Missing server name in user preferences connection: ');
	msgLocalWebserviceStaticContent = localize('msgLocalWebserviceStaticContent', 'LocalWebService: added static html content path: ');
	msgLocalWebserviceStarted = localize('msgLocalWebserviceStarted', 'LocalWebService listening on port ');
	msgRunQueryAllBatchesExecuted = localize('msgRunQueryAllBatchesExecuted', 'runQuery: all batches executed');
	msgStartedExecute = localize('msgStartedExecute', 'Started query execution for document "{0}"');
	msgFinishedExecute = localize('msgFinishedExecute', 'Finished query execution for document "{0}"');
	msgRunQueryError = localize('msgRunQueryError', 'runQuery: error: ');
	msgRunQueryExecutingBatch = localize('msgRunQueryExecutingBatch', 'runQuery: executeBatch called with SQL: ');
	msgRunQueryAddBatchResultsets = localize('msgRunQueryAddBatchResultsets', 'runQuery: adding resultsets for batch: ');
	msgRunQueryAddBatchError = localize('msgRunQueryAddBatchError', 'runQuery: adding error message for batch: ');
	msgRunQueryConnectionActive = localize('msgRunQueryConnectionActive', 'runQuery: active connection is connected, using it to run query');
	msgRunQueryConnectionDisconnected = localize('msgRunQueryConnectionDisconnected', 'runQuery: active connection is disconnected, reconnecting');
	msgRunQueryNoConnection = localize('msgRunQueryNoConnection', 'runQuery: no active connection - prompting for user');
	msgRunQueryInProgress = localize('msgRunQueryInProgress', 'A query is already running for this editor session. Please cancel this query or wait for its completion.');
	runQueryBatchStartMessage = localize('runQueryBatchStartMessage', 'Started executing query at ');
	runQueryBatchStartLine = localize('runQueryBatchStartLine', 'Line {0}');
	msgCancelQueryFailed = localize('msgCancelQueryFailed', 'Canceling the query failed: {0}');
	msgCancelQueryNotRunning = localize('msgCancelQueryNotRunning', 'Cannot cancel query as no query is running.');
	msgCancelQuerySuccess = localize('msgCancelQuerySuccess', 'Successfully canceled the query.');
	msgContentProviderOnContentUpdated = localize('msgContentProviderOnContentUpdated', 'Content provider: onContentUpdated called');
	msgContentProviderAssociationFailure = localize('msgContentProviderAssociationFailure', 'Content provider: Unable to associate status view for current file');
	msgContentProviderOnRootEndpoint = localize('msgContentProviderOnRootEndpoint', 'LocalWebService: Root end-point called');
	msgContentProviderOnResultsEndpoint = localize('msgContentProviderOnResultsEndpoint', 'LocalWebService: ResultsetsMeta endpoint called');
	msgContentProviderOnMessagesEndpoint = localize('msgContentProviderOnMessagesEndpoint', 'LocalWebService: Messages end-point called');
	msgContentProviderOnColumnsEndpoint = localize('msgContentProviderOnColumnsEndpoint', 'LocalWebService:  Columns end-point called for index = ');
	msgContentProviderOnRowsEndpoint = localize('msgContentProviderOnRowsEndpoint', 'LocalWebService: Rows end-point called for index = ');
	msgContentProviderOnClear = localize('msgContentProviderOnClear', 'Content provider: clear called');
	msgContentProviderOnUpdateContent = localize('msgContentProviderOnUpdateContent', 'Content provider: updateContent called');
	msgContentProviderProvideContent = localize('msgContentProviderProvideContent', 'Content provider: provideTextDocumentContent called: ');
	msgChooseDatabaseNotConnected = localize('msgChooseDatabaseNotConnected', 'No connection was found. Please connect to a server first.');
	msgChooseDatabasePlaceholder = localize('msgChooseDatabasePlaceholder', 'Choose a database from the list below');
	msgConnectionError = localize('msgConnectionError', 'Error {0}: {1}');
	msgConnectionError2 = localize('msgConnectionError2', 'Failed to connect: {0}');
	msgConnectionErrorPasswordExpired = localize('msgConnectionErrorPasswordExpired', 'Error {0}: {1} Please login as a different user and change the password using ALTER LOGIN.');
	connectionErrorChannelName = localize('connectionErrorChannelName', 'Connection Errors');
	msgPromptCancelConnect = localize('msgPromptCancelConnect', 'Server connection in progress. Do you want to cancel?');
	msgPromptClearRecentConnections = localize('msgPromptClearRecentConnections', 'Confirm to clear recent connections list');
	extensionActivated = localize('extensionActivated', 'activated.');
	extensionDeactivated = localize('extensionDeactivated', 'de-activated.');
	msgOpenSqlFile = localize('msgOpenSqlFile', 'To use this command, Open a .sql file -or- Change editor language to "SQL" -or- Select T-SQL text in the active SQL editor.');
	recentConnectionsPlaceholder = localize('recentConnectionsPlaceholder', 'Choose a connection profile from the list below');
	msgNoConnectionsInSettings = localize('msgNoConnectionsInSettings', 'To use this command, add connection profile to User Settings.');
	labelOpenGlobalSettings = localize('labelOpenGlobalSettings', 'Open Global Settings');
	labelOpenWorkspaceSettings = localize('labelOpenWorkspaceSettings', 'Open Workspace Settings');
	CreateProfileFromConnectionsListLabel = localize('CreateProfileFromConnectionsListLabel', 'Create Connection Profile');
	CreateProfileLabel = localize('CreateProfileLabel', 'Create');
	ClearRecentlyUsedLabel = localize('ClearRecentlyUsedLabel', 'Clear Recent Connections List');
	EditProfilesLabel = localize('EditProfilesLabel', 'Edit');
	RemoveProfileLabel = localize('RemoveProfileLabel', 'Remove');
	ManageProfilesPrompt = localize('ManageProfilesPrompt', 'Manage Connection Profiles');
	SampleServerName = localize('SampleServerName', '{{put-server-name-here}}');
	serverPrompt = localize('serverPrompt', 'Server name');
	serverPlaceholder = localize('serverPlaceholder', 'hostname\\instance or <server>.database.windows.net');
	databasePrompt = localize('databasePrompt', 'Database name');
	databasePlaceholder = localize('databasePlaceholder', '[Optional] Database to connect (press Enter to connect to <default> database)');
	databaseDefaultValue = localize('databaseDefaultValue', 'master');
	authTypePrompt = localize('authTypePrompt', 'Authentication Type');
	authTypeIntegrated = localize('authTypeIntegrated', 'Integrated');
	authTypeSql = localize('authTypeSql', 'SQL Login');
	authTypeAdUniversal = localize('authTypeAdUniversal', 'Active Directory Universal');
	usernamePrompt = localize('usernamePrompt', 'User name');
	usernamePlaceholder = localize('usernamePlaceholder', 'User name (SQL Login)');
	passwordPrompt = localize('passwordPrompt', 'Password');
	passwordPlaceholder = localize('passwordPlaceholder', 'Password (SQL Login)');
	msgSavePassword = localize('msgSavePassword', 'Save Password? If \'No\', password will be required each time you connect');
	profileNamePrompt = localize('profileNamePrompt', 'Profile Name');
	profileNamePlaceholder = localize('profileNamePlaceholder', '[Optional] Enter a name for this profile');
	filepathPrompt = localize('filepathPrompt', 'File path');
	filepathPlaceholder = localize('filepathPlaceholder', 'File name');
	filepathMessage = localize('filepathMessage', 'File name');
	overwritePrompt = localize('overwritePrompt', 'A file with this name already exists. Do you want to replace the existing file?');
	overwritePlaceholder = localize('overwritePlaceholder', 'A file with this name already exists');
	msgSaveResultInProgress = localize('msgSaveResultInProgress', 'A save request is already executing. Please wait for its completion.');
	msgCannotOpenContent = localize('msgCannotOpenContent', 'Error occurred opening content in editor.');
	msgSaveStarted = localize('msgSaveStarted', 'Started saving results to ');
	msgSaveFailed = localize('msgSaveFailed', 'Failed to save results. ');
	msgSaveSucceeded = localize('msgSaveSucceeded', 'Successfully saved results to ');
	msgSelectProfile = localize('msgSelectProfile', 'Select connection profile');
	msgSelectProfileToRemove = localize('msgSelectProfileToRemove', 'Select profile to remove');
	confirmRemoveProfilePrompt = localize('confirmRemoveProfilePrompt', 'Confirm to remove this profile.');
	msgNoProfilesSaved = localize('msgNoProfilesSaved', 'No connection profile to remove.');
	msgProfileRemoved = localize('msgProfileRemoved', 'Profile removed successfully');
	msgProfileCreated = localize('msgProfileCreated', 'Profile created successfully');
	msgProfileCreatedAndConnected = localize('msgProfileCreatedAndConnected', 'Profile created and connected');
	msgClearedRecentConnections = localize('msgClearedRecentConnections', 'Recent connections list cleared');
	msgSelectionIsRequired = localize('msgSelectionIsRequired', 'Selection is required.');
	msgIsRequired = localize('msgIsRequired', ' is required.');
	msgRetry = localize('msgRetry', 'Retry');
	msgError = localize('msgError', 'Error: ');
	msgYes = localize('msgYes', 'Yes');
	msgNo = localize('msgNo', 'No');
	defaultDatabaseLabel = localize('defaultDatabaseLabel', '<default>');
	notConnectedLabel = localize('notConnectedLabel', 'Disconnected');
	notConnectedTooltip = localize('notConnectedTooltip', 'Click to connect to a database');
	connectingLabel = localize('connectingLabel', 'Connecting');
	connectingTooltip = localize('connectingTooltip', 'Connecting to: ');
	connectedLabel = localize('connectedLabel', 'Connected.');
	connectErrorLabel = localize('connectErrorLabel', 'Connection error');
	connectErrorTooltip = localize('connectErrorTooltip', 'Error connecting to: ');
	connectErrorCode = localize('connectErrorCode', 'Errorcode: ');
	connectErrorMessage = localize('connectErrorMessage', 'ErrorMessage: ');
	executeQueryLabel = localize('executeQueryLabel', 'Executing query ');
	cancelingQueryLabel = localize('cancelingQueryLabel', 'Canceling query ');
	updatingIntelliSenseLabel = localize('updatingIntelliSenseLabel', 'Updating IntelliSense...');
	unfoundResult = localize('unfoundResult', 'Data was disposed when text editor was closed; to view data please reexecute query.');
	extensionNotInitializedError = localize('extensionNotInitializedError', 'Unable to execute the command while the extension is initializing. Please try again later.');
	untitledScheme = localize('untitledScheme', 'untitled');
	msgChangeLanguageMode = localize('msgChangeLanguageMode', 'To use this command, you must set the language to "SQL". Confirm to change language mode.');
	msgChangedDatabaseContext = localize('msgChangedDatabaseContext', 'Changed database context to "{0}" for document "{1}"');
	msgPromptRetryCreateProfile = localize('msgPromptRetryCreateProfile', 'Error: Unable to connect using the connection information provided. Retry profile creation?');
	retryLabel = localize('retryLabel', 'Retry');
	msgConnecting = localize('msgConnecting', 'Connecting to server "{0}" on document "{1}".');
	msgConnectedServerInfo = localize('msgConnectedServerInfo', 'Connected to server "{0}" on document "{1}". Server information: {2}');
	msgConnectionFailed = localize('msgConnectionFailed', 'Error connecting to server "{0}". Details: {1}');
	msgChangingDatabase = localize('msgChangingDatabase', 'Changing database context to "{0}" on server "{1}" on document "{2}".');
	msgChangedDatabase = localize('msgChangedDatabase', 'Changed database context to "{0}" on server "{1}" on document "{2}".');
	msgDisconnected = localize('msgDisconnected', 'Disconnected on document "{0}"');
	msgErrorReadingConfigFile = localize('msgErrorReadingConfigFile', 'Error: Unable to load connection profiles from [{0}]. Check if the file is formatted correctly.');
	msgErrorOpeningConfigFile = localize('msgErrorOpeningConfigFile', 'Error: Unable to open connection profile settings file.');
	titleResultsPane = localize('titleResultsPane', 'Results: {0}');
	macOpenSslErrorMessage = localize('macOpenSslErrorMessage', 'OpenSSL version >=1.0.1 is required to connect.');
	macOpenSslHelpButton = localize('macOpenSslHelpButton', 'Help');
	gettingDefinitionMessage = localize('gettingDefinitionMessage', 'Getting definition ...');
	definitionRequestedStatus = localize('definitionRequestedStatus', 'DefinitionRequested');
	definitionRequestCompletedStatus = localize('definitionRequestCompletedStatus', 'DefinitionRequestCompleted');
	updatingIntelliSenseStatus = localize('updatingIntelliSenseStatus', 'updatingIntelliSense');
	intelliSenseUpdatedStatus = localize('intelliSenseUpdatedStatus', 'intelliSenseUpdated');
	testLocalizationConstant = localize('testLocalizationConstant', 'test');
};
