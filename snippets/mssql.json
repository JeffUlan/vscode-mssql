{
	"Get extension help": {
		"prefix": "sqlExtensionHelp",
		"body": [
			"/*",
			"mssql getting started:",
			"-----------------------------",
			"1. Change language mode to SQL: Open a .sql file or press Ctrl+K M (Cmd+K M on Mac) and choose 'SQL'.",
			"2. Connect to a database: Press F1 to show the command palette, type 'sqlcon' or 'sql' then click 'Connect'.",
			"3. Use the T-SQL editor: Type T-SQL statements in the editor using T-SQL IntelliSense or type 'sql' to see a list of code snippets you can tweak & reuse.",
			"4. Run T-SQL statements: Press F1 and type 'sqlex' or press Ctrl+Shift+e (Cmd+Shift+e on Mac) to execute all the T-SQL code in the editor.",
			"",
			"Tip #1: Put GO on a line by itself to separate T-SQL batches.",
			"Tip #2: Select some T-SQL text in the editor and press `Ctrl+Shift+e` (`Cmd+Shift+e` on Mac) to execute the selection",
			"*/"
		],
		"description": "Get extension help"
	},

	"Create a new Database": {
		"prefix": "sqlCreateDatabase",
		"body": [
			"-- Create a new database called '${DatabaseName}'",
			"-- Connect to the 'master' database to run this snippet",
			"USE master",
			"GO",
			"-- Create the new database if it does not exist already",
			"IF NOT EXISTS (",
			"  SELECT name",
			"   FROM sys.databases",
			"   WHERE name = N'${DatabaseName}'",
			")",
			"CREATE DATABASE ${DatabaseName}",
			"GO"
		],
		"description": "Create a new Database"
	},

	"Drop a Database": {
		"prefix": "sqlDropDatabase",
		"body": [
			"-- Drop the database '${DatabaseName}'",
			"-- Connect to the 'master' database to run this snippet",
			"USE master",
			"GO",
			"-- Uncomment the ALTER DATABASE statement below to set the database to SINGLE_USER mode if the drop database command fails because the database is in use.",
			"-- ALTER DATABASE ${DatabaseName} SET SINGLE_USER WITH ROLLBACK IMMEDIATE;",
			"-- Drop the database if it exists",
			"IF EXISTS (",
			"  SELECT name",
			"   FROM sys.databases",
			"   WHERE name = N'${DatabaseName}'",
			")",
			"DROP DATABASE ${DatabaseName}",
			"GO"
		],
		"description": "Drop a Database"
	},

	"Create a new Table": {
		"prefix": "sqlCreateTable",
		"body": [
			"-- Create a new table called '${TableName}' in schema '${SchemaName}'",
			"-- Drop the table if it already exists",
			"IF OBJECT_ID('${SchemaName}.${TableName}', 'U') IS NOT NULL",
			"DROP TABLE ${SchemaName}.${TableName}",
			"GO",
			"-- Create the table in the specified schema",
			"CREATE TABLE ${SchemaName}.${TableName}",
			"(",
			"	${TableName}Id INT NOT NULL PRIMARY KEY, -- primary key column",
			"	Column1 [NVARCHAR](50) NOT NULL,",
			"	Column2 [NVARCHAR](50) NOT NULL",
			"   -- specify more columns here",
			");",
			"GO"
		],
		"description": "Create a new Table"
	},

	"Drop a Table": {
		"prefix": "sqlDropTable",
		"body": [
			"-- Drop the table '${TableName}' in schema '${SchemaName}'",
			"IF EXISTS (",
			"  SELECT *",
			"    FROM sys.tables",
			"    JOIN sys.schemas",
			"      ON sys.tables.schema_id = sys.schemas.schema_id",
			"  WHERE sys.schemas.name = N'${SchemaName}'",
			"     AND sys.tables.name = N'${TableName}'",
			")",
			"  DROP TABLE ${SchemaName}.${TableName}",
			"GO"
		],
		"description": "Drop a Table"
	},

	"Add a new column to a Table": {
		"prefix": "sqlAddColumn",
		"body": [
			"-- Add a new column '$(NewColumnName)' to table '${TableName}' in schema '${SchemaName}'",
			"ALTER TABLE ${SchemaName}.${TableName}",
			"  ADD $(NewColumnName) /*new_column_name*/ int /*new_column_datatype*/ NULL /*new_column_nullability*/",
			"GO"
		],
		"description": "Add a new column to a Table"
	},

	"Drop a column from a Table": {
		"prefix": "sqlDropColumn",
		"body": [
			"-- Drop '$(ColumnName)' from table '${TableName}' in schema '${SchemaName}'",
			"ALTER TABLE ${SchemaName}.${TableName}",
			"  DROP COLUMN $(ColumnName)",
			"GO"
		],
		"description": "Add a new column to a Table"
	},

	"Select rows from a Table or a View": {
		"prefix": "sqlSelect",
		"body": [
			"-- Select rows from a Table or View '${TableOrViewName}' in schema '${SchemaName}'",
			"SELECT * FROM ${SchemaName}.${TableOrViewName}",
			"WHERE </* add search conditions here */>",
			"GO"
		],
		"description": "Select rows from a Table or a View"
	},

	"Insert rows into a Table": {
		"prefix": "sqlInsertRows",
		"body": [
			"-- Insert rows into table '${TableName}'",
			"INSERT INTO ${TableName}",
			"( -- columns to insert data into",
			" [Column1], [Column2], [Column3]",
			")",
			"VALUES",
			"( -- first row: values for the columns in the list above",
			" Column1_Value, Column2_Value, Column3_Value",
			"),",
			"( -- second row: values for the columns in the list above",
			" Column1_Value, Column2_Value, Column3_Value",
			")",
			"-- add more rows here",
			"GO"
		],
		"description": "Insert rows into a Table"
	},

	"Delete rows from a Table": {
		"prefix": "sqlDeleteRows",
		"body": [
			"-- Delete rows from table '${TableName}'",
			"DELETE FROM ${TableName}",
			"WHERE </* add search conditions here */>",
			"GO"
		],
		"description": "Delete rows from a Table"
	},

	"Update rows in a Table": {
		"prefix": "sqlUpdateRows",
		"body": [
			"-- Update rows in table '${TableName}'",
			"UPDATE ${TableName}",
			"SET",
			" [Colum1] = Colum1_Value,",
			" [Colum2] = Colum2_Value",
			"-- add more columns and values here",
			"WHERE </* add search conditions here */>",
			"GO"
		],
		"description": "Update rows in a Table"
	},

	"Create a stored procedure": {
		"prefix": "sqlCreateStoredProc",
		"body": [
			"-- Create a new stored procedure called '${StoredProcedureName}' in schema '$(SchemaName)'",
			"-- Drop the stored procedure if it already exists",
			"IF EXISTS (",
			"SELECT *",
			"  FROM INFORMATION_SCHEMA.ROUTINES",
			"WHERE SPECIFIC_SCHEMA = N'${SchemaName}'",
			"  AND SPECIFIC_NAME = N'${StoredProcedureName}'",
			")",
			"DROP PROCEDURE ${SchemaName}.${StoredProcedureName}",
			"GO",
			"-- Create the stored procedure in the specified schema",
			"CREATE PROCEDURE ${SchemaName}.${StoredProcedureName}",
			"  @param1 /*parameter name*/ int /*datatype_for_param1*/ = 0 /*default_value_for_param1*/",
			"  @param1 /*parameter name*/ int /*datatype_for_param1*/ = 0 /*default_value_for_param2*/",
			"-- add more stored procedure parameters here",
			"AS",
			"  -- body of the stored procedure",
			"  SELECT @param1, @param2",
			"GO",
			"-- example to execute the stored procedure we just created",
			"EXECUTE ${SchemaName}.${StoredProcedureName} 1 /*value_for_param1*/, 2 /*value_for_param2*/",
			"GO"
		],
		"description": "Create a stored procedure"
	},

	"Drop a stored procedure": {
		"prefix": "sqlDropStoredProc",
		"body": [
			"-- Drop the stored procedure called '${StoredProcedureName}' in schema '$(SchemaName)'",
			"IF EXISTS (",
			"SELECT *",
			"  FROM INFORMATION_SCHEMA.ROUTINES",
			"WHERE SPECIFIC_SCHEMA = N'${SchemaName}'",
			"  AND SPECIFIC_NAME = N'${StoredProcedureName}'",
			")",
			"DROP PROCEDURE ${SchemaName}.${StoredProcedureName}",
			"GO"
		],
		"description": "Drop a stored procedure"
	},

	"List tables": {
		"prefix": "sqlListTablesAndViews",
		"body": [
			"-- Get a list of tables and views in the current database",
			"SELECT table_catalog [database], table_schema [schema], table_name name, table_type type",
			"FROM information_schema.tables",
			"GO"
		],
		"description": "List tables and vies in the current database"
	},

	"List databases": {
		"prefix": "sqlListDatabases",
		"body": [
			"-- Get a list of databases",
			"SELECT name FROM sys.databases",
			"GO"
		],
		"description": "List databases"
	}
}